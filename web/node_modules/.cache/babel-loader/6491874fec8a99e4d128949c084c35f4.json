{"ast":null,"code":"var _jsxFileName = \"/home/caetano/Desktop/tsreact/src/pages/Dashboard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport repositoriesApi from '../../services/api/repositories_api';\nimport logoImg from \"../../assets/logo.svg\";\nimport { Cotainer, Title, Form, Input, SubmitButton, ErrorMessage, RepositoriesList, RepositoriesListItem, RepositoriesListItemRepoInfo } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [inputText, setInputText] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState(() => {\n    const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');\n    return storagedRepositories ? JSON.parse(storagedRepositories) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories));\n  }, [repositories]);\n\n  async function addRepository(event) {\n    event.preventDefault();\n    if (!validateInputText()) return;\n\n    try {\n      const {\n        data\n      } = await repositoriesApi.get(`/repos/${inputText}`);\n      setRepositories([...repositories, data]);\n      setInputText('');\n      setInputError('');\n    } catch {\n      setInputError('Repositório não encontrado :/');\n    }\n  }\n\n  function validateInputText() {\n    if (!inputText) {\n      setInputError('Por favor, informe um repositório válido. ex: autor/repositório');\n      return false;\n    }\n\n    return true;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Cotainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logoImg,\n      alt: \"Github Explorer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Title, {\n      children: \"Explore reposit\\xF3rios do Github\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: addRepository,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        value: inputText,\n        onChange: ({\n          target\n        }) => setInputText(target.value),\n        hasError: !!inputError,\n        placeholder: \"Digite o nome do reposit\\xF3rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n        children: \"Pesquisar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), inputError && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: inputError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(RepositoriesList, {\n      children: repositories.map(repository => /*#__PURE__*/_jsxDEV(RepositoriesListItem, {\n        href: \"asdasd\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: repository.owner.avatar_url,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(RepositoriesListItemRepoInfo, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: repository.full_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: repository.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FiChevronRight, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, repository.full_name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"4GTWEuMUChTS8hT2hHcfZz0KwOI=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/caetano/Desktop/tsreact/src/pages/Dashboard/index.tsx"],"names":["React","useEffect","useState","FiChevronRight","repositoriesApi","Cotainer","Title","Form","Input","SubmitButton","ErrorMessage","RepositoriesList","RepositoriesListItem","RepositoriesListItemRepoInfo","Dashboard","inputText","setInputText","inputError","setInputError","repositories","setRepositories","storagedRepositories","localStorage","getItem","JSON","parse","setItem","stringify","addRepository","event","preventDefault","validateInputText","data","get","logoImg","target","value","map","repository","owner","avatar_url","full_name","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, FormEvent } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\n\nimport repositoriesApi from '../../services/api/repositories_api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport {\n  Cotainer,\n  Title,\n  Form,\n  Input,\n  SubmitButton,\n  ErrorMessage,\n  RepositoriesList,\n  RepositoriesListItem,\n  RepositoriesListItemRepoInfo,\n} from './styles';\n\ninterface IRepository {\n  full_name: string,\n  description: string,\n  owner: {\n    login: string,\n    avatar_url: string,\n  }\n}\n\nconst Dashboard: React.FC = () => {\n  const [inputText, setInputText] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<IRepository[]>(() => {\n    const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');\n    return storagedRepositories ? JSON.parse(storagedRepositories) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories));\n  }, [repositories]);\n\n  async function addRepository(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (!validateInputText()) return;\n\n    try {\n      const { data } = await repositoriesApi.get<IRepository>(`/repos/${inputText}`);\n      setRepositories([...repositories, data]);\n      setInputText('');\n      setInputError('');\n    } catch {\n      setInputError('Repositório não encontrado :/');\n    }\n  }\n\n  function validateInputText() {\n    if (!inputText) {\n      setInputError('Por favor, informe um repositório válido. ex: autor/repositório');\n      return false;\n    }\n\n    return true;\n  }\n\n  return (\n    <Cotainer>\n      <img src={logoImg} alt=\"Github Explorer\" />\n      <Title>Explore repositórios do Github</Title>\n\n      <Form onSubmit={addRepository}>\n        <Input\n          value={inputText}\n          onChange={({ target }) => setInputText(target.value)}\n          hasError={!!inputError}\n          placeholder=\"Digite o nome do repositório\"\n        />\n        <SubmitButton>Pesquisar</SubmitButton>\n      </Form>\n\n      {inputError && <ErrorMessage>{inputError}</ErrorMessage>}\n\n      <RepositoriesList>\n        {repositories.map((repository) => (\n          <RepositoriesListItem href=\"asdasd\" key={repository.full_name}>\n            <img src={repository.owner.avatar_url} alt=\"\" />\n            <RepositoriesListItemRepoInfo>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </RepositoriesListItemRepoInfo>\n            <FiChevronRight />\n          </RepositoriesListItem>\n        ))}\n      </RepositoriesList>\n    </Cotainer>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}