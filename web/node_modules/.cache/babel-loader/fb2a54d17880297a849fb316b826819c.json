{"ast":null,"code":"var _jsxFileName = \"/home/caetano/Desktop/tsreact/src/pages/Repository/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport { useRouteMatch, useHistory, Link } from 'react-router-dom';\nimport repositoriesApi from \"../../services/api/repositories_api\";\nimport logoImg from \"../../assets/logo.svg\";\nimport { Header, ContentContainer, IssuesList, IssuesListItem, IssuesListItemInfo, LoadingMessage } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Repository = () => {\n  _s();\n\n  const [repository, setRepository] = useState(null);\n  const [issues, setIssues] = useState([]);\n  const {\n    params: routeParams\n  } = useRouteMatch();\n  const browserHistory = useHistory();\n  useEffect(() => {\n    document.title = 'Repo Info | Github Explorer';\n\n    async function loadPageData() {\n      const [{\n        data: apiRepository\n      }, {\n        data: apiIssues\n      }] = await Promise.all([repositoriesApi.get(`repos/${routeParams.repository}`), repositoriesApi.get(`repos/${routeParams.repository}/issues`)]);\n      setRepository(apiRepository);\n      setIssues(apiIssues);\n    }\n\n    loadPageData();\n  }, [routeParams.repository]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Github Explorer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => browserHistory.goBack(),\n        children: [/*#__PURE__*/_jsxDEV(FiChevronLeft, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), \"Voltar\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n      children: [repository && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n        children: \"Carregando dados do reposit\\xF3rio...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this) // <RepositoryInfo>\n      //   <RepositoryInfoHeader>\n      //     <img src={repository.owner.avatar_url} alt=\"\" />\n      //     <div>\n      //       <strong>{repository.full_name}</strong>\n      //       <p>{repository.description}</p>\n      //     </div>\n      //   </RepositoryInfoHeader>\n      //   <RepositoryInfoList>\n      //     <li>\n      //       <strong>{repository.stargazers_count}</strong>\n      //       <span>Stars</span>\n      //     </li>\n      //     <li>\n      //       <strong>{repository.forks_count}</strong>\n      //       <span>Forks</span>\n      //     </li>\n      //     <li>\n      //       <strong>{repository.open_issues_count}</strong>\n      //       <span>Issues abertas</span>\n      //     </li>\n      //   </RepositoryInfoList>\n      // </RepositoryInfo>\n      , /*#__PURE__*/_jsxDEV(IssuesList, {\n        children: issues.map(issue => /*#__PURE__*/_jsxDEV(IssuesListItem, {\n          href: issue.html_url,\n          target: \"_blank\",\n          children: [/*#__PURE__*/_jsxDEV(IssuesListItemInfo, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: issue.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: issue.user.login\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FiChevronRight, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, issue.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Repository, \"HADsbu4rXbU6aVEi17m3x4jrT3k=\", false, function () {\n  return [useRouteMatch, useHistory];\n});\n\n_c = Repository;\nexport default Repository;\n\nvar _c;\n\n$RefreshReg$(_c, \"Repository\");","map":{"version":3,"sources":["/home/caetano/Desktop/tsreact/src/pages/Repository/index.tsx"],"names":["React","useEffect","useState","FiChevronLeft","FiChevronRight","useRouteMatch","useHistory","Link","repositoriesApi","Header","ContentContainer","IssuesList","IssuesListItem","IssuesListItemInfo","LoadingMessage","Repository","repository","setRepository","issues","setIssues","params","routeParams","browserHistory","document","title","loadPageData","data","apiRepository","apiIssues","Promise","all","get","logoImg","goBack","map","issue","html_url","user","login","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport { useRouteMatch, useHistory, Link } from 'react-router-dom';\nimport repositoriesApi from '@/services/api/repositories_api';\n\nimport logoImg from '@/assets/logo.svg';\n\nimport { IRouteParams, IRepository, IIssue } from './interfaces';\n\nimport {\n  Header,\n  ContentContainer,\n  RepositoryInfo,\n  RepositoryInfoHeader,\n  RepositoryInfoList,\n  IssuesList,\n  IssuesListItem,\n  IssuesListItemInfo,\n  LoadingMessage,\n} from './styles';\n\nconst Repository: React.FC = () => {\n  const [repository, setRepository] = useState<IRepository | null>(null);\n  const [issues, setIssues] = useState<IIssue[]>([]);\n  const { params: routeParams } = useRouteMatch<IRouteParams>();\n  const browserHistory = useHistory();\n\n  useEffect(() => {\n    document.title = 'Repo Info | Github Explorer';\n\n    async function loadPageData() {\n      const [{ data: apiRepository }, { data: apiIssues }] = await Promise.all([\n        repositoriesApi.get(`repos/${routeParams.repository}`),\n        repositoriesApi.get(`repos/${routeParams.repository}/issues`),\n      ]);\n\n      setRepository(apiRepository);\n      setIssues(apiIssues);\n    }\n\n    loadPageData();\n  }, [routeParams.repository]);\n\n  return (\n    <>\n      <Header>\n        <Link to=\"/\">\n          <img src={logoImg} alt=\"Github Explorer\" />\n        </Link>\n        <button onClick={() => browserHistory.goBack()}>\n          <FiChevronLeft />\n          Voltar\n        </button>\n      </Header>\n\n      <ContentContainer>\n        {repository && (\n          <LoadingMessage>Carregando dados do reposit√≥rio...</LoadingMessage>\n          // <RepositoryInfo>\n          //   <RepositoryInfoHeader>\n          //     <img src={repository.owner.avatar_url} alt=\"\" />\n          //     <div>\n          //       <strong>{repository.full_name}</strong>\n          //       <p>{repository.description}</p>\n          //     </div>\n          //   </RepositoryInfoHeader>\n\n        //   <RepositoryInfoList>\n        //     <li>\n        //       <strong>{repository.stargazers_count}</strong>\n        //       <span>Stars</span>\n        //     </li>\n        //     <li>\n        //       <strong>{repository.forks_count}</strong>\n        //       <span>Forks</span>\n        //     </li>\n        //     <li>\n        //       <strong>{repository.open_issues_count}</strong>\n        //       <span>Issues abertas</span>\n        //     </li>\n        //   </RepositoryInfoList>\n        // </RepositoryInfo>\n        )}\n\n        <IssuesList>\n          {issues.map((issue) => (\n            <IssuesListItem href={issue.html_url} key={issue.id} target=\"_blank\">\n              <IssuesListItemInfo>\n                <strong>{issue.title}</strong>\n                <p>{issue.user.login}</p>\n              </IssuesListItemInfo>\n              <FiChevronRight />\n            </IssuesListItem>\n          ))}\n        </IssuesList>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default Repository;\n"]},"metadata":{},"sourceType":"module"}